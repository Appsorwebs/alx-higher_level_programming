# run test with python3 -m doctest -v ./tests/101-lazy_matrix_mul.txt

First import method to test
===========================
>>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

SUCCESS CASES:
==============

Test signed and unsigned ints and floats in same size lists in list matrix
::
    >>> m_a = [[1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[7 10]
     [15 22]]

    >>> m_a = [[1, 2]]
    >>> m_b = [[3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

    >>> m_a = [[1.2, 5.5, 6.2],
    ... [4.66, 12.3, -9.2]
    ... ]
    >>> m_b = [[5.0, 3.3],
    ... [-2.9, 4.4],
    ... [7.2, 4.4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[34.69 55.44]
     [-78.61 29.018]]

Test list of lists
::
    >>> m_a = [[1, 2]]
    >>> m_b = [3, 4]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [11]

    >>> m_a = [1, 2]
    >>> m_b = [3, 4]
    >>> print(lazy_matrix_mul(m_a, m_b))
    11


FAIL CASES
==========
Test minimum of two arguments must be provided.
::
    >>> m_a = [[2, 5]]
    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
	...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

    >>> print(lazy_matrix_mul()) 
    Traceback (most recent call last):
	...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 
    'm_a' and 'm_b'

Test two matrices cannot be multiplied 
::
    >>> m_a = [[1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [[1, 2],
    ... [2, 3],
    ... [4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
	...
    ValueError: shapes (2, 2) and (3, 2) not aligned: 2 (dim 1) != 3 (dim 0)


Test empty parameters ``m_a`` and ``m_b`` 
::
    >>> m_a = [[]]
    >>> m_b = [[5, 6],
    ... [7, 8]
    ... ]
	>>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1, 0) and (2, 2) not aligned: 0 (dim 1) != 2 (dim 0)

    >>> m_a = [[5, 6],
    ... [7, 8]
    ... ]
    >>> m_b = [[]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2, 2) and (1, 0) not aligned: 2 (dim 1) != 1 (dim 0)

Test parameters ``m_a`` and ``m_b`` must be lists. 
::
    >>> m_a = "ALX"
    >>> m_b = [[1, 2]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> m_a = [[1, 2]]
    >>> m_b = "ALX"
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> m_a = "ALX"
    >>> m_b = "School"
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: Scalar operands are not allowed, use '*' instead

    >>> m_a = None
    >>> m_b = None
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

Test parameters are lists of lists
::
    >>> m_a = [1, 2]
    >>> m_b = [[3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (2, ) and (1, 2) not aligned: 2 (dim 0) != 1 (dim 0)


Test lists of lists containin integers or floats
::
    >>> m_a = [[1, "not int"]]
    >>> m_b = [[3, 4]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: shapes (1, 2) and (1, 2) not aligned: 2 (dim 1) != 1 (dim 0)

    >>> m_a = [[5, 6],
    ... [6, 4]
    ... ]
    >>> m_b = [[5, "6"],
    ... [7, 8]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: invalid data type for einsum

    >>> m_a = [[1, "not int"]]
    >>> m_b = [[{"a": 1}, 6.6]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    TypeError: Object arrays are not currently supported

Test length of rows are equal for matrices ``m_a`` and ``m_b`` 
::
    >>> m_a = [[1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [[1, 2],
    ... [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> m_a = [[1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [[1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.

    >>> m_a = [[1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
    ...
    ValueError: setting an array element with a sequence.
